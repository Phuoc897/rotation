import cv2
import numpy as np
# import tkinter as tk # Removed tkinter
# from tkinter import filedialog # Removed filedialog
from google.colab import files # Import files for Colab

# ========== 1. Ch·ªçn ·∫£nh ==========
# root = tk.Tk() # Removed tkinter
# root.withdraw() # Removed tkinter
# file_path = filedialog.askopenfilename(title='Ch·ªçn ·∫£nh') # Removed tkinter

uploaded = files.upload() # Use Colab's file upload

if not uploaded:
    print("Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c ch·ªçn.")
    # exit() # Removed exit to allow the cell to continue if no file is selected, though the rest of the code will likely fail without an image. Consider adding error handling later if needed.
else:
    # Assuming only one file is uploaded for simplicity
    file_path = next(iter(uploaded))
    print(f"ƒê√£ ch·ªçn ·∫£nh: {file_path}")

    img = cv2.imread(file_path)
    if img is None:
        print("L·ªói ƒë·ªçc ·∫£nh.")
        # exit() # Removed exit

    # ========== 2. Nh·∫≠p d·ªØ li·ªáu t·ª´ b√†n ph√≠m ==========
    angle = float(input("Nh·∫≠p g√≥c quay (ƒë·ªô): "))
    in1 = int(input("B·∫•m 1 ƒë·ªÉ x·ª≠ l√Ω ·∫£nh 3D, b·∫•m 2 ƒë·ªÉ x·ª≠ l√Ω ·∫£nh 2D: "))

    angle_rad = np.radians(angle)

    if in1 == 1:
        homo = input("Nh·∫≠p ma tr·∫≠n xoay 1x3 (vd: 1 0 0): ")
        homo = np.fromstring(homo, sep=' ')  # chuy·ªÉn th√†nh m·∫£ng numpy
        if homo.shape != (3,):
            print("Sai ƒë·ªãnh d·∫°ng ma tr·∫≠n xoay.")
            # exit() # Removed exit

        # ========== 3. T·∫°o ma tr·∫≠n xoay A ==========
        A1 = np.array([
            [np.cos(angle_rad), np.sin(angle_rad)],
            [-np.sin(angle_rad), np.cos(angle_rad)]
        ])
        A = np.vstack([np.hstack([A1, np.zeros((2,1))]), homo.reshape(1,3)])
        print("Ma tr·∫≠n A:\n", A)

        # B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c √°p d·ª•ng ma tr·∫≠n A ƒë·ªÉ bi·∫øn ƒë·ªïi ·∫£nh (warpPerspective 3D)
    else:
        print("Ch·∫ø ƒë·ªô 2D ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω trong ƒëo·∫°n n√†y.")

    # The following code blocks were not part of the original error but are included in the same cell.
    # I will keep them as they are for now, assuming they are part of the user's workflow,
    # but note that they use a hardcoded image file '1.png' and the variable 'img' from the upload is not used here.
    # This might lead to errors later if '1.png' doesn't exist or if the intention was to use the uploaded image.

    # This section reads '1.png' and performs a 2D rotation example.
    # If the user intended to use the uploaded image for this, further modifications are needed.
    import numpy as np
    import cv2

    # ƒê·ªçc ·∫£nh v√† chuy·ªÉn sang float
    # img = cv2.imread('1.png', cv2.IMREAD_GRAYSCALE) # This line uses a hardcoded image '1.png'
    # a = img.astype(np.float64) # This will cause an error if the above line is commented out and 'img' from upload is used, as it might be color.

    # Assuming the user wants to continue with the uploaded image if it's grayscale for the 2D part
    # If the uploaded image is color and user selected 2D, this part might need adjustment.
    if img is not None and in1 == 2: # Only proceed with 2D processing if an image was uploaded and 2D was selected
        if len(img.shape) == 3:
            print("Chuy·ªÉn ƒë·ªïi ·∫£nh m√†u sang ·∫£nh x√°m cho x·ª≠ l√Ω 2D.")
            img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            a = img_gray.astype(np.float64)
        else:
             a = img.astype(np.float64)


        b1, b2 = a.shape  # chi·ªÅu cao, chi·ªÅu r·ªông

        # Ma tr·∫≠n d·ªãch g·ªëc v·ªÅ t√¢m ·∫£nh
        trans = np.array([
            [1, 0, -b2/2],
            [0, 1, -b1/2],
            [0, 0, 1]
        ])

        # Ma tr·∫≠n xoay 2D (v√≠ d·ª• 45 ƒë·ªô)
        theta = np.radians(45) # This was hardcoded to 45 degrees, but the user also input an angle earlier.
                               # I will keep it as 45 degrees as it seems to be a separate example,
                               # but if the intention was to use the user's input angle for the 2D part,
                               # this line should be changed to theta = angle_rad.
        A = np.array([
            [np.cos(theta), np.sin(theta), 0],
            [-np.sin(theta), np.cos(theta), 0],
            [0, 0, 1]
        ])

        # T·∫°o m·∫£ng ch·ª©a t·ªça ƒë·ªô sau khi xoay
        outx = np.zeros((b1, b2), dtype=int)
        outy = np.zeros((b1, b2), dtype=int)

        # Bi·∫øn ƒë·ªïi t·ª´ng ƒëi·ªÉm ·∫£nh
        for i in range(b1):
            for j in range(b2):
                point = np.array([[j], [i], [1]])  # l∆∞u √Ω: x=j, y=i
                new = A @ (trans @ point)
                outx[i, j] = round(new[0, 0] / new[2, 0])
                outy[i, j] = round(new[1, 0] / new[2, 0])

        # T√¨m min/max t·ªça ƒë·ªô m·ªõi
        minoutx = np.min(outx)
        minouty = np.min(outy)
        maxoutx = np.max(outx)
        maxouty = np.max(outy)

        print("T·ªça ƒë·ªô sau khi xoay:")
        print(f"X: {minoutx} ‚Üí {maxoutx}")
        print(f"Y: {minouty} ‚Üí {maxouty}")

        # This section reconstructs the image and displays it.
        import numpy as np
        import cv2
        from PIL import Image # PIL is imported but not used
        import matplotlib.pyplot as plt

        # Gi·∫£ s·ª≠: img l√† ·∫£nh ƒë·∫ßu v√†o (a), outx, outy l√† k·∫øt qu·∫£ bi·∫øn ƒë·ªïi t·ªça ƒë·ªô
        # Assuming 'img' here refers to the potentially color uploaded image
        # and 'a' is the grayscale version used for calculations.
        # The original code uses 'a' for shape and 'img' for pixel values, which is inconsistent if 'img' is color.
        # I will adjust to use 'img' for pixel values if it's color, and 'a' for grayscale calculations.
        a1 = 1 if len(img.shape) == 3 else 0 # Check if the original uploaded image is color

        # X√°c ƒë·ªãnh k√≠ch th∆∞·ªõc ·∫£nh m·ªõi
        new_w = maxoutx + abs(minoutx) + 1
        new_h = maxouty + abs(minouty) + 1

        # T·∫°o ·∫£nh m·ªõi r·ªóng (grayscale ho·∫∑c RGB)
        if a1 == 1:
            f = np.zeros((new_h, new_w, 3), dtype=np.uint8)
        else:
            f = np.zeros((new_h, new_w), dtype=np.uint8)

        # G√°n l·∫°i gi√° tr·ªã pixel
        # Need to map the original image pixels based on the calculated new coordinates
        # and the offset to handle negative coordinates.
        # This part of the original code seems to directly copy pixels which is not correct for rotation.
        # A proper rotation would involve inverse mapping or using cv2.warpAffine/warpPerspective.
        # However, to stick to the user's current approach of manual mapping:
        # The original loop assigned pixels from img[i, j] to f[y_new, x_new].
        # This is still a direct copy, not a rotation.
        # To perform a rotation manually, you'd typically iterate through the output image
        # and calculate the corresponding input image coordinates using the inverse transform.
        # Since the user's code is doing a forward mapping and assigning pixels,
        # I will keep this structure but acknowledge it's not a standard rotation implementation.
        # The original code also seems to use 'img' for color values and 'a' for grayscale calculations inconsistently.
        # I will use the appropriate source image based on whether the original uploaded image was color or not.

        for i in range(b1): # b1, b2 are dimensions of the grayscale image 'a'
            for j in range(b2):
                x_new = outx[i, j] + abs(minoutx)
                y_new = outy[i, j] + abs(minouty)
                if 0 <= y_new < new_h and 0 <= x_new < new_w:
                    if a1 == 1: # If original image was color
                         # Assuming the pixel value to copy is from the original color image
                        f[y_new, x_new, üôÇ = img[i, j, üôÇ
                    else: # If original image was grayscale
                        # Assuming the pixel value to copy is from the original grayscale image
                        f[y_new, x_new] = img[i, j] # Or use a[i,j] if calculations were meant to affect pixel values

        # ========== Hi·ªÉn th·ªã k·∫øt qu·∫£ ==========
        # Check if img is not None before displaying
        if img is not None:
            plt.figure()
            plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB) if a1 else img, cmap='gray')
            plt.title("·∫¢nh G·ªëc")

        plt.figure()
        # Need to handle the case where the processed image 'f' might not be created if no image was uploaded or 2D was not selected.
        if 'f' in locals():
            plt.imshow(cv2.cvtColor(f, cv2.COLOR_BGR2RGB) if a1 else f, cmap='gray')
            plt.title("·∫¢nh ƒë√£ x·ª≠ l√Ω")
            plt.show()
        else:
            print("·∫¢nh ƒë√£ x·ª≠ l√Ω kh√¥ng ƒë∆∞·ª£c t·∫°o.")
