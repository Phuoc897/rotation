import streamlit as st
import numpy as np
from PIL import Image, ImageFilter, ImageEnhance, ImageDraw
import io
import math

# Import optional dependencies v·ªõi error handling
try:
    import cv2
    HAS_CV2 = True
except ImportError:
    HAS_CV2 = False
    st.warning("‚ö†Ô∏è OpenCV kh√¥ng kh·∫£ d·ª•ng - m·ªôt s·ªë t√≠nh nƒÉng 3D s·∫Ω b·ªã h·∫°n ch·∫ø")

try:
    import matplotlib.pyplot as plt
    from mpl_toolkits.mplot3d import Axes3D
    HAS_MATPLOTLIB = True
except ImportError:
    HAS_MATPLOTLIB = False

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="üé® Ch·ªânh s·ª≠a ·∫£nh 2D & 3D v·ªõi Givens Rotation",
    page_icon="üé®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #4A90E2;
        font-size: 2.5rem;
        margin-bottom: 2rem;
    }
    
    .matrix-display {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 15px;
        font-family: 'Courier New', monospace;
        margin: 10px 0;
    }
    
    .math-formula {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
        text-align: center;
        font-weight: bold;
    }
    
    .stSlider > div > div > div > div {
        background: linear-gradient(45deg, #667eea, #764ba2);
    }
    
    .stButton > button {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.5rem 1rem;
        font-weight: 600;
        width: 100%;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    
    .sidebar-section {
        background: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    
    .transform-info {
        background: #e8f4fd;
        border-left: 4px solid #4A90E2;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown('<h1 class="main-header">üé® Ch·ªânh s·ª≠a ·∫£nh 2D & 3D v·ªõi Givens Rotation</h1>', unsafe_allow_html=True)

# =================== ENHANCED GIVENS ROTATION MATRICES ===================

def givens_rotation_matrix_2d(theta):
    """
    T·∫°o ma tr·∫≠n xoay Givens 2D
    G(Œ∏) = [cos(Œ∏) -sin(Œ∏)]
           [sin(Œ∏)  cos(Œ∏)]
    """
    c = np.cos(theta)
    s = np.sin(theta)
    
    return np.array([
        [c, -s],
        [s, c]
    ])

def givens_rotation_matrix_3d(theta, axis='z'):
    """
    T·∫°o ma tr·∫≠n xoay Givens 3D cho c√°c tr·ª•c x, y, z
    
    Rx(Œ∏) = [1    0       0   ]    - Xoay quanh tr·ª•c X
            [0  cos(Œ∏) -sin(Œ∏)]
            [0  sin(Œ∏)  cos(Œ∏)]
    
    Ry(Œ∏) = [ cos(Œ∏) 0  sin(Œ∏)]    - Xoay quanh tr·ª•c Y  
            [   0    1    0   ]
            [-sin(Œ∏) 0  cos(Œ∏)]
    
    Rz(Œ∏) = [cos(Œ∏) -sin(Œ∏) 0]     - Xoay quanh tr·ª•c Z
            [sin(Œ∏)  cos(Œ∏) 0]
            [  0       0    1]
    """
    c = np.cos(theta)
    s = np.sin(theta)
    
    if axis.lower() == 'x':
        return np.array([
            [1, 0, 0],
            [0, c, -s],
            [0, s, c]
        ])
    elif axis.lower() == 'y':
        return np.array([
            [c, 0, s],
            [0, 1, 0],
            [-s, 0, c]
        ])
    elif axis.lower() == 'z':
        return np.array([
            [c, -s, 0],
            [s, c, 0],
            [0, 0, 1]
        ])
    else:
        raise ValueError("Axis ph·∫£i l√† 'x', 'y', ho·∫∑c 'z'")

def combined_givens_rotation_3d(theta_x, theta_y, theta_z, order='zyx'):
    """
    K·∫øt h·ª£p c√°c ma tr·∫≠n Givens rotation theo th·ª© t·ª± ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    
    Default order 'zyx': R = Rz(Œ∏z) √ó Ry(Œ∏y) √ó Rx(Œ∏x)
    C√°c order kh√°c: 'xyz', 'xzy', 'yxz', 'yzx', 'zxy'
    """
    Rx = givens_rotation_matrix_3d(theta_x, 'x')
    Ry = givens_rotation_matrix_3d(theta_y, 'y') 
    Rz = givens_rotation_matrix_3d(theta_z, 'z')
    
    if order.lower() == 'xyz':
        return np.dot(Rz, np.dot(Ry, Rx))  # R = Rz √ó Ry √ó Rx
    elif order.lower() == 'xzy':
        return np.dot(Ry, np.dot(Rz, Rx))  # R = Ry √ó Rz √ó Rx
    elif order.lower() == 'yxz':
        return np.dot(Rz, np.dot(Rx, Ry))  # R = Rz √ó Rx √ó Ry
    elif order.lower() == 'yzx':
        return np.dot(Rx, np.dot(Rz, Ry))  # R = Rx √ó Rz √ó Ry
    elif order.lower() == 'zxy':
        return np.dot(Ry, np.dot(Rx, Rz))  # R = Ry √ó Rx √ó Rz
    elif order.lower() == 'zyx':
        return np.dot(Rx, np.dot(Ry, Rz))  # R = Rx √ó Ry √ó Rz
    else:
        raise ValueError("Order kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: 'xyz', 'xzy', 'yxz', 'yzx', 'zxy', 'zyx'")

def scaling_matrix_3d(sx, sy, sz):
    """
    Ma tr·∫≠n scale 3D
    S = [sx  0   0 ]
        [0  sy   0 ]
        [0   0  sz ]
    """
    return np.array([
        [sx, 0, 0],
        [0, sy, 0],
        [0, 0, sz]
    ])

def translation_matrix_3d(tx, ty, tz):
    """
    Ma tr·∫≠n translation 3D (homogeneous coordinates)
    T = [1  0  0  tx]
        [0  1  0  ty]
        [0  0  1  tz]
        [0  0  0   1]
    """
    return np.array([
        [1, 0, 0, tx],
        [0, 1, 0, ty],
        [0, 0, 1, tz],
        [0, 0, 0, 1]
    ])

def shear_matrix_2d(shx, shy):
    """
    Ma tr·∫≠n shear 2D
    Sh = [1   shx]
         [shy  1 ]
    """
    return np.array([
        [1, shx],
        [shy, 1]
    ])

def reflection_matrix_2d(axis='x'):
    """
    Ma tr·∫≠n ph·∫£n chi·∫øu 2D
    Refl_x = [1   0]  - Ph·∫£n chi·∫øu qua tr·ª•c X
             [0  -1]
             
    Refl_y = [-1  0]  - Ph·∫£n chi·∫øu qua tr·ª•c Y  
             [0   1]
    """
    if axis.lower() == 'x':
        return np.array([
            [1, 0],
            [0, -1]
        ])
    elif axis.lower() == 'y':
        return np.array([
            [-1, 0],  
            [0, 1]
        ])
    else:
        raise ValueError("Axis ph·∫£i l√† 'x' ho·∫∑c 'y'")

# =================== ENHANCED 2D IMAGE TRANSFORMATIONS ===================

def apply_2d_givens_rotation(image, theta, center=None):
    """
    √Åp d·ª•ng Givens rotation cho ·∫£nh 2D b·∫±ng ma tr·∫≠n transformation
    """
    if center is None:
        center = (image.width // 2, image.height // 2)
    
    # T·∫°o ma tr·∫≠n Givens rotation
    R = givens_rotation_matrix_2d(theta)
    
    # Chuy·ªÉn ƒë·ªïi ƒë·ªÉ xoay quanh center
    # T = T(center) √ó R √ó T(-center)
    cos_theta = np.cos(theta)
    sin_theta = np.sin(theta)
    
    cx, cy = center
    
    # Ma tr·∫≠n affine transformation cho PIL
    # [a c e]   [cos -sin cx(1-cos)+cy*sin]
    # [b d f] = [sin  cos cy(1-cos)-cx*sin]
    # [0 0 1]   [0    0          1        ]
    
    a = cos_theta
    b = sin_theta  
    c = -sin_theta
    d = cos_theta
    e = cx * (1 - cos_theta) + cy * sin_theta
    f = cy * (1 - cos_theta) - cx * sin_theta
    
    # √Åp d·ª•ng transformation
    return image.transform(
        image.size,
        Image.AFFINE,
        (a, b, c, d, e, f),
        resample=Image.BICUBIC,
        fillcolor='white'
    )

def apply_2d_shear(image, shear_x, shear_y):
    """
    √Åp d·ª•ng shear transformation cho ·∫£nh 2D
    """
    # Ma tr·∫≠n shear
    shear_matrix = shear_matrix_2d(shear_x, shear_y)
    
    # Chuy·ªÉn ƒë·ªïi th√†nh affine transform cho PIL
    a, c = shear_matrix[0, :]
    b, d = shear_matrix[1, :]
    e, f = 0, 0
    
    return image.transform(
        image.size,
        Image.AFFINE,
        (a, b, c, d, e, f),
        resample=Image.BICUBIC,
        fillcolor='white'
    )

def apply_2d_reflection(image, axis='x'):
    """
    √Åp d·ª•ng reflection cho ·∫£nh 2D
    """
    if axis.lower() == 'x':
        return image.transpose(Image.FLIP_TOP_BOTTOM)
    elif axis.lower() == 'y':
        return image.transpose(Image.FLIP_LEFT_RIGHT)
    else:
        return image

def edit_image_2d_advanced(image, brightness=1.0, contrast=1.0, saturation=1.0, 
                          blur_radius=0, rotation=0, shear_x=0, shear_y=0, 
                          scale_x=1.0, scale_y=1.0, reflection=None):
    """
    Ch·ªânh s·ª≠a ·∫£nh 2D n√¢ng cao v·ªõi c√°c ph√©p bi·∫øn ƒë·ªïi Givens
    """
    if image is None:
        return None, {}
    
    if image.mode != 'RGB':
        image = image.convert('RGB')
    
    transforms_applied = {}
    
    # √Åp d·ª•ng c√°c filter c∆° b·∫£n
    if brightness != 1.0:
        enhancer = ImageEnhance.Brightness(image)
        image = enhancer.enhance(brightness)
        transforms_applied['brightness'] = f"Brightness: {brightness:.2f}"
    
    if contrast != 1.0:
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(contrast)
        transforms_applied['contrast'] = f"Contrast: {contrast:.2f}"
    
    if saturation != 1.0:
        enhancer = ImageEnhance.Color(image)
        image = enhancer.enhance(saturation)
        transforms_applied['saturation'] = f"Saturation: {saturation:.2f}"
    
    if blur_radius > 0:
        image = image.filter(ImageFilter.GaussianBlur(radius=blur_radius))
        transforms_applied['blur'] = f"Gaussian Blur: {blur_radius}px"
    
    # √Åp d·ª•ng scaling
    if scale_x != 1.0 or scale_y != 1.0:
        new_width = int(image.width * scale_x)
        new_height = int(image.height * scale_y)
        image = image.resize((new_width, new_height), Image.BICUBIC)
        transforms_applied['scale'] = f"Scale: {scale_x:.2f}x, {scale_y:.2f}y"
    
    # √Åp d·ª•ng reflection
    if reflection:
        image = apply_2d_reflection(image, reflection)
        transforms_applied['reflection'] = f"Reflection: {reflection}-axis"
    
    # √Åp d·ª•ng shear
    if shear_x != 0 or shear_y != 0:
        image = apply_2d_shear(image, shear_x, shear_y)
        transforms_applied['shear'] = f"Shear: X={shear_x:.2f}, Y={shear_y:.2f}"
    
    # √Åp d·ª•ng Givens rotation
    if rotation != 0:
        theta = np.radians(rotation)
        image = apply_2d_givens_rotation(image, theta)
        transforms_applied['rotation'] = f"Givens Rotation: {rotation}¬∞ ({theta:.3f} rad)"
    
    return image, transforms_applied

# =================== ENHANCED 3D TRANSFORMATIONS ===================

def create_enhanced_3d_mesh(image, depth_scale=50, mesh_resolution=50, depth_method='enhanced'):
    """
    T·∫°o mesh 3D n√¢ng cao t·ª´ ·∫£nh v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p depth
    """
    # Resize ƒë·ªÉ t·ªëi ∆∞u performance
    resized_img = image.resize((mesh_resolution, mesh_resolution))
    img_array = np.array(resized_img)
    
    # T·∫°o depth map d·ª±a tr√™n method
    if depth_method == 'enhanced' and HAS_CV2:
        gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY) if len(img_array.shape) == 3 else img_array
        
        # Combine multiple methods
        # 1. Brightness depth
        brightness_depth = gray.astype(np.float64)
        
        # 2. Edge depth
        edges = cv2.Canny(gray, 50, 150)
        edges_blur = cv2.GaussianBlur(edges, (3, 3), 0)
        
        # 3. Gradient depth
        grad_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
        grad_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
        gradient_depth = np.sqrt(grad_x**2 + grad_y**2)
        
        # Combine v·ªõi weights
        depth = (0.5 * brightness_depth + 
                0.3 * edges_blur.astype(np.float64) + 
                0.2 * gradient_depth)
                
    elif depth_method == 'laplacian' and HAS_CV2:
        gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY) if len(img_array.shape) == 3 else img_array
        laplacian = cv2.Laplacian(gray, cv2.CV_64F)
        depth = np.abs(laplacian)
        
    else:
        # Fallback: brightness method
        if len(img_array.shape) == 3:
            depth = np.mean(img_array, axis=2)
        else:
            depth = img_array.astype(np.float64)
    
    # Normalize depth
    if depth.max() > depth.min():
        depth = (depth - depth.min()) / (depth.max() - depth.min())
    else:
        depth = np.zeros_like(depth)
    
    # T·∫°o mesh
    vertices = []
    colors = []
    faces = []
    normals = []
    
    h, w = depth.shape
    
    # T·∫°o vertices v·ªõi enhanced depth
    for y in range(h):
        for x in range(w):
            # Normalize coordinates
            vertex_x = (x - w/2) / w * 2
            vertex_y = (y - h/2) / h * 2  
            vertex_z = depth[y, x] * depth_scale / 100
            
            vertices.append([vertex_x, vertex_y, vertex_z])
            
            # Color t·ª´ ·∫£nh g·ªëc
            if len(img_array.shape) == 3:
                colors.append(img_array[y, x] / 255.0)
            else:
                gray_val = img_array[y, x] / 255.0
                colors.append([gray_val, gray_val, gray_val])
            
            # Calculate normal (simplified)
            normal = [0, 0, 1]  # Default up
            normals.append(normal)
    
    # T·∫°o faces v·ªõi better triangulation
    for y in range(h-1):
        for x in range(w-1):
            i1 = y * w + x
            i2 = y * w + (x + 1)
            i3 = (y + 1) * w + x
            i4 = (y + 1) * w + (x + 1)
            
            # Two triangles per quad
            faces.append([i1, i2, i3])
            faces.append([i2, i4, i3])
    
    return np.array(vertices), np.array(colors), np.array(faces), np.array(normals), depth

def apply_3d_givens_transformations(vertices, theta_x, theta_y, theta_z, 
                                  scale_x=1.0, scale_y=1.0, scale_z=1.0,
                                  translate_x=0.0, translate_y=0.0, translate_z=0.0,
                                  rotation_order='zyx'):
    """
    √Åp d·ª•ng c√°c ph√©p bi·∫øn ƒë·ªïi 3D v·ªõi Givens rotation matrices
    """
    # 1. Scaling transformation
    if scale_x != 1.0 or scale_y != 1.0 or scale_z != 1.0:
        S = scaling_matrix_3d(scale_x, scale_y, scale_z)
        vertices = np.dot(vertices, S.T)
    
    # 2. Givens rotation transformation
    R = combined_givens_rotation_3d(theta_x, theta_y, theta_z, rotation_order)
    vertices = np.dot(vertices, R.T)
    
    # 3. Translation
    if translate_x != 0.0 or translate_y != 0.0 or translate_z != 0.0:
        vertices[:, 0] += translate_x
        vertices[:, 1] += translate_y  
        vertices[:, 2] += translate_z
    
    return vertices, R, scaling_matrix_3d(scale_x, scale_y, scale_z)

def perspective_projection_enhanced(vertices_3d, fov=np.pi/4, aspect=1.0, 
                                  near=0.1, far=100.0, camera_distance=3.0):
    """
    Perspective projection n√¢ng cao v·ªõi ma tr·∫≠n projection
    """
    # Translate vertices relative to camera
    camera_vertices = vertices_3d.copy()
    camera_vertices[:, 2] += camera_distance
    
    # Perspective projection matrix
    f = 1.0 / np.tan(fov / 2.0)
    
    projection_matrix = np.array([
        [f/aspect, 0, 0, 0],
        [0, f, 0, 0], 
        [0, 0, (far+near)/(near-far), (2*far*near)/(near-far)],
        [0, 0, -1, 0]
    ])
    
    # Convert to homogeneous coordinates
    vertices_homo = np.hstack([camera_vertices, np.ones((camera_vertices.shape[0], 1))])
    
    # Apply projection
    projected_homo = np.dot(vertices_homo, projection_matrix.T)
    
    # Perspective divide
    projected_2d = []
    for i, vertex in enumerate(projected_homo):
        if vertex[3] != 0:
            x = vertex[0] / vertex[3]
            y = vertex[1] / vertex[3]
        else:
            x, y = 0, 0
        projected_2d.append([x, y])
    
    return np.array(projected_2d)

def render_3d_mesh_enhanced(vertices, colors, faces, projected_vertices, 
                          image_size=(800, 800), lighting=True):
    """
    Render mesh 3D v·ªõi enhanced lighting v√† shading
    """
    img = Image.new('RGB', image_size, (20, 20, 30))  # Dark background
    draw = ImageDraw.Draw(img)
    
    # Scale projected vertices to image coordinates  
    proj_scaled = projected_vertices.copy()
    proj_scaled[:, 0] = (proj_scaled[:, 0] + 1) * image_size[0] / 2
    proj_scaled[:, 1] = (proj_scaled[:, 1] + 1) * image_size[1] / 2
    
    # Sort faces by depth (painter's algorithm)
    face_depths = []
    for face in faces:
        avg_z = np.mean([vertices[i][2] for i in face])
        face_depths.append(avg_z) 
    
    # Sort faces back to front
    sorted_indices = np.argsort(face_depths)
    
    # Light setup
    light_direction = np.array([0.0, 0.0, 1.0])  # Light from camera
    light_direction = light_direction / np.linalg.norm(light_direction)
    
    # Render faces
    for idx in sorted_indices:
        face = faces[idx]
        
        try:
            # Get triangle vertices in 2D
            triangle_2d = []
            for vertex_idx in face:
                if 0 <= vertex_idx < len(proj_scaled):
                    point = proj_scaled[vertex_idx]
                    triangle_2d.append((int(point[0]), int(point[1])))
            
            if len(triangle_2d) == 3:
                # Calculate face normal for lighting
                if lighting:
                    v1 = vertices[face[1]] - vertices[face[0]]
                    v2 = vertices[face[2]] - vertices[face[0]]
                    normal = np.cross(v1, v2)
                    if np.linalg.norm(normal) > 0:
                        normal = normal / np.linalg.norm(normal)
                        
                        # Calculate lighting
                        light_intensity = max(0.2, np.dot(normal, light_direction))
                    else:
                        light_intensity = 0.5
                else:
                    light_intensity = 1.0
                
                # Get face color
                face_colors = [colors[i] for i in face if i < len(colors)]
                if face_colors:
                    avg_color = np.mean(face_colors, axis=0)
                    # Apply lighting
                    lit_color = avg_color * light_intensity
                    color_int = tuple(np.clip(lit_color * 255, 0, 255).astype(int))
                    
                    # Draw triangle
                    draw.polygon(triangle_2d, fill=color_int, outline=color_int)
        except:
            continue
    
    return img

# =================== MAIN APPLICATION ===================

# Upload ·∫£nh
uploaded_file = st.file_uploader(
    "üìÅ Ch·ªçn ·∫£nh ƒë·ªÉ ch·ªânh s·ª≠a", 
    type=['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff'],
    help="H·ªó tr·ª£: PNG, JPG, JPEG, GIF, BMP, TIFF"
)

if uploaded_file is not None:
    # ƒê·ªçc ·∫£nh g·ªëc
    original_image = Image.open(uploaded_file)
    
    # T·∫°o tabs
    tab1, tab2, tab3 = st.tabs(["üñºÔ∏è Ch·ªânh s·ª≠a 2D v·ªõi Givens", "üåê Hi·ªáu ·ª©ng 3D v·ªõi Givens", "üìä Ma tr·∫≠n & C√¥ng th·ª©c"])
    
    with tab1:
        st.subheader("üñºÔ∏è Ch·ªânh s·ª≠a 2D v·ªõi Givens Rotation")
        
        # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**üì∑ ·∫¢nh g·ªëc:**")
            st.image(original_image, use_column_width=True)
        
        # Controls cho 2D
        st.sidebar.markdown("## üéõÔ∏è Tham s·ªë 2D Givens")
        st.sidebar.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
        
        # Basic adjustments
        st.sidebar.markdown("### üé® Ch·ªânh s·ª≠a c∆° b·∫£n")
        brightness = st.sidebar.slider("üîÜ ƒê·ªô s√°ng", 0.0, 2.0, 1.0, 0.1)
        contrast = st.sidebar.slider("üåà ƒê·ªô t∆∞∆°ng ph·∫£n", 0.0, 2.0, 1.0, 0.1)  
        saturation = st.sidebar.slider("üé® ƒê·ªô b√£o h√≤a", 0.0, 2.0, 1.0, 0.1)
        blur_radius = st.sidebar.slider("üî≤ L√†m m·ªù", 0, 10, 0, 1)
        
        # Givens transformations
        st.sidebar.markdown("### üîÑ Ph√©p bi·∫øn ƒë·ªïi Givens")
        rotation_2d = st.sidebar.slider("üåÄ Givens Rotation (ƒë·ªô)", -180, 180, 0, 5)
        shear_x = st.sidebar.slider("üìê Shear X", -1.0, 1.0, 0.0, 0.1)
        shear_y = st.sidebar.slider("üìê Shear Y", -1.0, 1.0, 0.0, 0.1)
        scale_x = st.sidebar.slider("üìè Scale X", 0.1, 3.0, 1.0, 0.1)
        scale_y = st.sidebar.slider("üìè Scale Y", 0.1, 3.0, 1.0, 0.1)
        
        reflection_options = [None, 'x', 'y']
        reflection = st.sidebar.selectbox("üîÑ Reflection", reflection_options)
        
        st.sidebar.markdown('</div>', unsafe_allow_html=True)
        
        # √Åp d·ª•ng transformations
        edited_image, transforms_applied = edit_image_2d_advanced(
            original_image.copy(), brightness, contrast, saturation, blur_radius,
            rotation_2d, shear_x, shear_y, scale_x, scale_y, reflection
        )
        
        with col2:
            st.markdown("**‚ú® ·∫¢nh ƒë√£ ch·ªânh s·ª≠a:**") 
            st.image(edited_image, use_column_width=True)
        
        # Hi·ªÉn th·ªã ma tr·∫≠n 2D
        st.markdown("### üìä Ma tr·∫≠n Givens 2D ƒë∆∞·ª£c √°p d·ª•ng")
        
        if rotation_2d != 0:
            theta = np.radians(rotation_2d)
            rotation_matrix = givens_rotation_matrix_2d(theta)
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.markdown('<div class="math-formula">', unsafe_allow_html=True)
                st.markdown(f"**Givens Rotation Matrix G({rotation_2d}¬∞)**")
                st.markdown('</div>', unsafe_allow_html=True)
                
                st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
                st.code(f"""
G(Œ∏) = [  {rotation_matrix[0,0]:7.4f}   {rotation_matrix[0,1]:7.4f} ]
       [  {rotation_matrix[1,0]:7.4f}   {rotation_matrix[1,1]:7.4f} ]

Œ∏ = {rotation_2d}¬∞ = {theta:.4f} radians
cos(Œ∏) = {np.cos(theta):7.4f}
sin(Œ∏) = {np.sin(theta):7.4f}
                """)
                st.markdown('</div>', unsafe_allow_html=True)
        
        if shear_x != 0 or shear_y != 0:
            shear_matrix = shear_matrix_2d(shear_x, shear_y)
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.markdown('<div class="math-formula">', unsafe_allow_html=True)
                st.markdown(f"**Shear Matrix S({shear_x:.2f}, {shear_y:.2f})**")
                st.markdown('</div>', unsafe_allow_html=True)
                
                st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
                st.code(f"""
S = [  {shear_matrix[0,0]:7.4f}   {shear_matrix[0,1]:7.4f} ]
    [  {shear_matrix[1,0]:7.4f}   {shear_matrix[1,1]:7.4f} ]
                """)
                st.markdown('</div>', unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã th√¥ng tin transforms
        if transforms_applied:
            st.markdown("### üîß Ph√©p bi·∫øn ƒë·ªïi ƒë√£ √°p d·ª•ng")
            st.markdown('<div class="transform-info">', unsafe_allow_html=True)
            for key, value in transforms_applied.items():
                st.markdown(f"‚Ä¢ **{value}**")
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Download button
        if edited_image:
            buf = io.BytesIO()
            edited_image.save(buf, format='PNG')
            buf.seek(0)
            
            st.download_button(
                label="üíæ T·∫£i xu·ªëng ·∫£nh 2D",
                data=buf,
                file_name=f"edited_2d_{uploaded_file.name}",
                mime="image/png"
            )
    
    with tab2:
        st.subheader("üåê Hi·ªáu ·ª©ng 3D v·ªõi Givens Rotation")
        
        # Sidebar controls cho 3D
        st.sidebar.markdown("## üéõÔ∏è Tham s·ªë 3D Givens")
        st.sidebar.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
        
        # 3D Givens Rotations
        st.sidebar.markdown("### üîÑ Givens Rotations 3D")
        theta_x = st.sidebar.slider("üîÑ Rotation X (ƒë·ªô)", -180, 180, 0, 5)
        theta_y = st.sidebar.slider("üîÑ Rotation Y (ƒë·ªô)", -180, 180, 0, 5)
        theta_z = st.sidebar.slider("üîÑ Rotation Z (ƒë·ªô)", -180, 180, 0, 5)
        
        rotation_order = st.sidebar.selectbox(
            "üìê Th·ª© t·ª± rotation", 
            ['zyx', 'xyz', 'xzy', 'yxz', 'yzx', 'zxy'],
            help="Th·ª© t·ª± √°p d·ª•ng c√°c rotation matrices"
        )
        
        # 3D Transformations
        st.sidebar.markdown("### üìè Scale 3D")
        scale_3d_x = st.sidebar.slider("üìè Scale X", 0.1, 3.0, 1.0, 0.1)
        scale_3d_y = st.sidebar.slider("üìè Scale Y", 0.1, 3.0, 1.0, 0.1)
        scale_3d_z = st.sidebar.slider("üìè Scale Z", 0.1, 3.0, 1.0, 0.1)
        
        st.sidebar.markdown("### üìç Translation 3D")
        translate_x = st.sidebar.slider("üìç Translate X", -2.0, 2.0, 0.0, 0.1)
        translate_y = st.sidebar.slider("üìç Translate Y", -2.0, 2.0, 0.0, 0.1)
        translate_z = st.sidebar.slider("üìç Translate Z", -2.0, 2.0, 0.0, 0.1)
        
        # Mesh parameters
        st.sidebar.markdown("### üï∏Ô∏è Tham s·ªë Mesh")
        depth_scale = st.sidebar.slider("üèîÔ∏è ƒê·ªô s√¢u", 1, 100, 30, 5)
        mesh_resolution = st.sidebar.slider("üîç ƒê·ªô ph√¢n gi·∫£i", 20, 100, 50, 10)
        
        depth_methods = ['enhanced', 'laplacian', 'brightness']
        depth_method = st.sidebar.selectbox("üé® Ph∆∞∆°ng ph√°p depth", depth_methods)
        
        # Camera parameters
        st.sidebar.markdown("### üìπ Tham s·ªë Camera")
        camera_distance = st.sidebar.slider("üìè Kho·∫£ng c√°ch camera", 1.0, 10.0, 3.0, 0.5)
        fov = st.sidebar.slider("üîç Field of View", 30, 120, 45, 5)
        
        lighting = st.sidebar.checkbox("üí° Lighting", True)
        
        st.sidebar.markdown('</div>', unsafe_allow_html=True)
        
        # T·∫°o v√† x·ª≠ l√Ω 3D mesh
        if st.button("üöÄ T·∫°o hi·ªáu ·ª©ng 3D"):
            with st.spinner("üîÑ ƒêang t·∫°o mesh 3D..."):
                # T·∫°o mesh 3D
                vertices, colors, faces, normals, depth_map = create_enhanced_3d_mesh(
                    original_image, depth_scale, mesh_resolution, depth_method
                )
                
                # √Åp d·ª•ng transformations
                theta_x_rad = np.radians(theta_x)
                theta_y_rad = np.radians(theta_y)
                theta_z_rad = np.radians(theta_z)
                
                transformed_vertices, rotation_matrix, scale_matrix = apply_3d_givens_transformations(
                    vertices, theta_x_rad, theta_y_rad, theta_z_rad,
                    scale_3d_x, scale_3d_y, scale_3d_z,
                    translate_x, translate_y, translate_z,
                    rotation_order
                )
                
                # Perspective projection
                fov_rad = np.radians(fov)
                projected_vertices = perspective_projection_enhanced(
                    transformed_vertices, fov_rad, aspect=1.0, 
                    camera_distance=camera_distance
                )
                
                # Render mesh
                rendered_3d = render_3d_mesh_enhanced(
                    transformed_vertices, colors, faces, projected_vertices,
                    image_size=(800, 800), lighting=lighting
                )
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**üì∑ ·∫¢nh g·ªëc:**")
                    st.image(original_image, use_column_width=True)
                    
                    st.markdown("**üó∫Ô∏è Depth Map:**")
                    depth_img = Image.fromarray((depth_map * 255).astype(np.uint8))
                    st.image(depth_img, use_column_width=True)
                
                with col2:
                    st.markdown("**üåê ·∫¢nh 3D v·ªõi Givens:**")
                    st.image(rendered_3d, use_column_width=True)
                
                # Hi·ªÉn th·ªã ma tr·∫≠n 3D
                st.markdown("### üìä Ma tr·∫≠n Givens 3D ƒë∆∞·ª£c √°p d·ª•ng")
                
                # Individual rotation matrices
                if theta_x != 0 or theta_y != 0 or theta_z != 0:
                    Rx = givens_rotation_matrix_3d(theta_x_rad, 'x')
                    Ry = givens_rotation_matrix_3d(theta_y_rad, 'y')
                    Rz = givens_rotation_matrix_3d(theta_z_rad, 'z')
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.markdown('<div class="math-formula">', unsafe_allow_html=True)
                        st.markdown(f"**Rx({theta_x}¬∞)**")
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
                        st.code(f"""
Rx = [{Rx[0,0]:6.3f} {Rx[0,1]:6.3f} {Rx[0,2]:6.3f}]
     [{Rx[1,0]:6.3f} {Rx[1,1]:6.3f} {Rx[1,2]:6.3f}]
     [{Rx[2,0]:6.3f} {Rx[2,1]:6.3f} {Rx[2,2]:6.3f}]
                        """)
                        st.markdown('</div>', unsafe_allow_html=True)
                    
                    with col2:
                        st.markdown('<div class="math-formula">', unsafe_allow_html=True)
                        st.markdown(f"**Ry({theta_y}¬∞)**")
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
                        st.code(f"""
Ry = [{Ry[0,0]:6.3f} {Ry[0,1]:6.3f} {Ry[0,2]:6.3f}]
     [{Ry[1,0]:6.3f} {Ry[1,1]:6.3f} {Ry[1,2]:6.3f}]
     [{Ry[2,0]:6.3f} {Ry[2,1]:6.3f} {Ry[2,2]:6.3f}]
                        """)
                        st.markdown('</div>', unsafe_allow_html=True)
                    
                    with col3:
                        st.markdown('<div class="math-formula">', unsafe_allow_html=True)
                        st.markdown(f"**Rz({theta_z}¬∞)**")
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
                        st.code(f"""
Rz = [{Rz[0,0]:6.3f} {Rz[0,1]:6.3f} {Rz[0,2]:6.3f}]
     [{Rz[1,0]:6.3f} {Rz[1,1]:6.3f} {Rz[1,2]:6.3f}]
     [{Rz[2,0]:6.3f} {Rz[2,1]:6.3f} {Rz[2,2]:6.3f}]
                        """)
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # Combined rotation matrix
                st.markdown('<div class="math-formula">', unsafe_allow_html=True)
                st.markdown(f"**Ma tr·∫≠n rotation k·∫øt h·ª£p (order: {rotation_order.upper()})**")
                st.markdown('</div>', unsafe_allow_html=True)
                
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
                    st.code(f"""
R_combined = [{rotation_matrix[0,0]:7.4f} {rotation_matrix[0,1]:7.4f} {rotation_matrix[0,2]:7.4f}]
             [{rotation_matrix[1,0]:7.4f} {rotation_matrix[1,1]:7.4f} {rotation_matrix[1,2]:7.4f}]
             [{rotation_matrix[2,0]:7.4f} {rotation_matrix[2,1]:7.4f} {rotation_matrix[2,2]:7.4f}]
                    """)
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # Scale matrix
                if scale_3d_x != 1.0 or scale_3d_y != 1.0 or scale_3d_z != 1.0:
                    st.markdown('<div class="math-formula">', unsafe_allow_html=True)
                    st.markdown(f"**Ma tr·∫≠n Scale 3D**")
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    col1, col2, col3 = st.columns([1, 2, 1])
                    with col2:
                        st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
                        st.code(f"""
S = [{scale_matrix[0,0]:7.4f} {scale_matrix[0,1]:7.4f} {scale_matrix[0,2]:7.4f}]
    [{scale_matrix[1,0]:7.4f} {scale_matrix[1,1]:7.4f} {scale_matrix[1,2]:7.4f}]
    [{scale_matrix[2,0]:7.4f} {scale_matrix[2,1]:7.4f} {scale_matrix[2,2]:7.4f}]
                        """)
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # 3D Statistics
                st.markdown("### üìà Th·ªëng k√™ 3D")
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("üî∫ Vertices", len(vertices))
                with col2:
                    st.metric("üìê Faces", len(faces))
                with col3:
                    st.metric("üé® Colors", len(colors))
                with col4:
                    st.metric("üìè Resolution", f"{mesh_resolution}x{mesh_resolution}")
                
                # Download 3D result
                buf_3d = io.BytesIO()
                rendered_3d.save(buf_3d, format='PNG')
                buf_3d.seek(0)
                
                st.download_button(
                    label="üíæ T·∫£i xu·ªëng ·∫£nh 3D",
                    data=buf_3d,
                    file_name=f"3d_givens_{uploaded_file.name}",
                    mime="image/png"
                )
        
        else:
            st.info("üëÜ Nh·∫•n n√∫t 'T·∫°o hi·ªáu ·ª©ng 3D' ƒë·ªÉ xem k·∫øt qu·∫£")
    
    with tab3:
        st.subheader("üìä Ma tr·∫≠n & C√¥ng th·ª©c Givens Rotation")
        
        # Theory section
        st.markdown("### üßÆ L√Ω thuy·∫øt Ma tr·∫≠n Givens")
        
        st.markdown("""
        **Givens Rotation** l√† m·ªôt ph√©p bi·∫øn ƒë·ªïi tr·ª±c giao ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ xoay vector trong kh√¥ng gian 2D ho·∫∑c 3D.
        Ma tr·∫≠n Givens c√≥ t√≠nh ch·∫•t ƒë·∫∑c bi·ªát l√† **tr·ª±c giao** (orthogonal), nghƒ©a l√† G^T √ó G = I.
        """)
        
        # 2D Givens
        st.markdown("#### üîÑ Ma tr·∫≠n Givens 2D")
        st.markdown('<div class="math-formula">', unsafe_allow_html=True)
        st.markdown("**C√¥ng th·ª©c t·ªïng qu√°t:**")
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
        st.code("""
G‚ÇÇD(Œ∏) = [cos(Œ∏)  -sin(Œ∏)]
         [sin(Œ∏)   cos(Œ∏)]

V·ªõi Œ∏ l√† g√≥c xoay (radian)
        """)
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown("**T√≠nh ch·∫•t:**")
        st.markdown("""
        ‚Ä¢ **Tr·ª±c giao**: G^T √ó G = I
        ‚Ä¢ **Det(G) = 1**: B·∫£o to√†n th·ªÉ t√≠ch
        ‚Ä¢ **Ngh·ªãch ƒë·∫£o**: G^(-1) = G^T = G(-Œ∏)
        """)
        
        # 3D Givens
        st.markdown("#### üåê Ma tr·∫≠n Givens 3D")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("**Rotation quanh tr·ª•c X:**")
            st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
            st.code("""
Rx(Œ∏) = [1    0       0   ]
        [0  cos(Œ∏) -sin(Œ∏)]
        [0  sin(Œ∏)  cos(Œ∏)]
            """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown("**Rotation quanh tr·ª•c Y:**")
            st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
            st.code("""
Ry(Œ∏) = [ cos(Œ∏) 0  sin(Œ∏)]
        [   0    1    0   ]
        [-sin(Œ∏) 0  cos(Œ∏)]
            """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col3:
            st.markdown("**Rotation quanh tr·ª•c Z:**")
            st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
            st.code("""
Rz(Œ∏) = [cos(Œ∏) -sin(Œ∏) 0]
        [sin(Œ∏)  cos(Œ∏) 0]
        [  0       0    1]
            """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Combined rotations
        st.markdown("#### üîó K·∫øt h·ª£p Rotations 3D")
        st.markdown("""
        Khi k·∫øt h·ª£p nhi·ªÅu rotation, th·ª© t·ª± nh√¢n ma tr·∫≠n r·∫•t quan tr·ªçng:
        """)
        
        st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
        st.code("""
Rotation Orders:
‚Ä¢ ZYX: R = Rx(Œ∏x) √ó Ry(Œ∏y) √ó Rz(Œ∏z)  [Euler angles]
‚Ä¢ XYZ: R = Rz(Œ∏z) √ó Ry(Œ∏y) √ó Rx(Œ∏x)  [Roll-Pitch-Yaw]
‚Ä¢ ZXY: R = Ry(Œ∏y) √ó Rx(Œ∏x) √ó Rz(Œ∏z)  [Alternative]

L∆∞u √Ω: A √ó B ‚â† B √ó A (kh√¥ng giao ho√°n)
        """)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Other transformations
        st.markdown("#### üîß C√°c ph√©p bi·∫øn ƒë·ªïi kh√°c")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Ma tr·∫≠n Scale:**")
            st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
            st.code("""
S‚ÇÉD = [sx  0   0 ]
      [0  sy   0 ]
      [0   0  sz ]
            """)
            st.markdown('</div>', unsafe_allow_html=True)
            
            st.markdown("**Ma tr·∫≠n Shear 2D:**")
            st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
            st.code("""
Sh = [1   shx]
     [shy  1 ]
            """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown("**Ma tr·∫≠n Translation 3D:**")
            st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
            st.code("""
T‚ÇÉD = [1  0  0  tx]
      [0  1  0  ty]
      [0  0  1  tz]
      [0  0  0   1]
            """)
            st.markdown('</div>', unsafe_allow_html=True)
            
            st.markdown("**Ma tr·∫≠n Reflection:**")
            st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
            st.code("""
Refl_x = [1   0]  Refl_y = [-1  0]
         [0  -1]           [0   1]
            """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Applications
        st.markdown("### üöÄ ·ª®ng d·ª•ng trong Computer Graphics")
        
        st.markdown("""
        **1. üéÆ Game Development:**
        ‚Ä¢ Xoay nh√¢n v·∫≠t, object trong game
        ‚Ä¢ Animation v√† chuy·ªÉn ƒë·ªông
        ‚Ä¢ Camera controls
        
        **2. üé¨ Computer Vision:**
        ‚Ä¢ Image registration v√† alignment
        ‚Ä¢ Object detection v√† tracking
        ‚Ä¢ Augmented Reality (AR)
        
        **3. üèóÔ∏è 3D Modeling:**
        ‚Ä¢ Mesh transformations
        ‚Ä¢ Skeletal animation
        ‚Ä¢ Geometric modeling
        
        **4. üî¨ Scientific Computing:**
        ‚Ä¢ Numerical linear algebra
        ‚Ä¢ QR decomposition
        ‚Ä¢ Eigenvalue problems
        """)
        
        # Interactive demo
        st.markdown("### üéØ Demo t∆∞∆°ng t√°c")
        
        demo_angle = st.slider("üîÑ G√≥c xoay demo (ƒë·ªô)", 0, 360, 45, 15)
        demo_theta = np.radians(demo_angle)
        demo_matrix = givens_rotation_matrix_2d(demo_theta)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Ma tr·∫≠n Givens:**")
            st.markdown('<div class="matrix-display">', unsafe_allow_html=True)
            st.code(f"""
G({demo_angle}¬∞) = [{demo_matrix[0,0]:7.4f} {demo_matrix[0,1]:7.4f}]
           [{demo_matrix[1,0]:7.4f} {demo_matrix[1,1]:7.4f}]
            """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown("**T√≠nh ch·∫•t:**")
            det = np.linalg.det(demo_matrix)
            st.markdown(f"‚Ä¢ **Determinant:** {det:.6f}")
            st.markdown(f"‚Ä¢ **cos({demo_angle}¬∞):** {np.cos(demo_theta):.4f}")
            st.markdown(f"‚Ä¢ **sin({demo_angle}¬∞):** {np.sin(demo_theta):.4f}")
            st.markdown(f"‚Ä¢ **Orthogonal:** {'‚úÖ' if np.allclose(np.dot(demo_matrix.T, demo_matrix), np.eye(2)) else '‚ùå'}")
        
        # Performance notes
        st.markdown("### ‚ö° L∆∞u √Ω Performance")
        
        st.markdown("""
        **T·ªëi ∆∞u h√≥a:**
        
        üü¢ **Nhanh:**
        ‚Ä¢ S·ª≠ d·ª•ng NumPy vectorized operations
        ‚Ä¢ Pre-compute sin/cos values
        ‚Ä¢ Batch processing cho nhi·ªÅu vertices
        
        üü° **Trung b√¨nh:**
        ‚Ä¢ Loop qua t·ª´ng vertex ri√™ng l·∫ª
        ‚Ä¢ T√≠nh to√°n realtime cho large meshes
        
        üî¥ **Ch·∫≠m:**
        ‚Ä¢ Python loops thu·∫ßn t√∫y
        ‚Ä¢ Kh√¥ng s·ª≠ d·ª•ng matrix operations
        ‚Ä¢ Recompute matrices m·ªói frame
        """)
        
        st.markdown('<div class="transform-info">', unsafe_allow_html=True)
        st.markdown("""
        üí° **Pro Tips:**
        ‚Ä¢ K·∫øt h·ª£p multiple transformations th√†nh 1 ma tr·∫≠n duy nh·∫•t
        ‚Ä¢ S·ª≠ d·ª•ng homogeneous coordinates cho 3D transformations
        ‚Ä¢ Cache computed matrices khi c√≥ th·ªÉ
        ‚Ä¢ S·ª≠ d·ª•ng GPU acceleration cho large datasets
        """)
        st.markdown('</div>', unsafe_allow_html=True)

else:
    # Landing page
    st.markdown("""
    ## üëã Ch√†o m·ª´ng ƒë·∫øn v·ªõi Givens Rotation Image Editor!
    
    ### üéØ T√≠nh nƒÉng ch√≠nh:
    
    **üñºÔ∏è Ch·ªânh s·ª≠a 2D:**
    ‚Ä¢ Givens Rotation v·ªõi g√≥c t√πy ch·ªânh
    ‚Ä¢ Shear, Scale, Reflection transformations
    ‚Ä¢ Brightness, Contrast, Saturation adjustments
    ‚Ä¢ Gaussian Blur effects
    
    **üåê Hi·ªáu ·ª©ng 3D:**
    ‚Ä¢ T·∫°o mesh 3D t·ª´ ·∫£nh 2D v·ªõi depth mapping
    ‚Ä¢ √Åp d·ª•ng Givens rotation cho c·∫£ 3 tr·ª•c X, Y, Z
    ‚Ä¢ Multiple rotation orders (ZYX, XYZ, etc.)
    ‚Ä¢ Enhanced lighting v√† shading
    ‚Ä¢ Perspective projection
    
    **üìä Visualization:**
    ‚Ä¢ Hi·ªÉn th·ªã ma tr·∫≠n transformations
    ‚Ä¢ Interactive demos
    ‚Ä¢ Real-time parameter adjustments
    
    ### üöÄ C√°ch s·ª≠ d·ª•ng:
    1. **Upload ·∫£nh** b·∫±ng c√°ch nh·∫•n n√∫t "Ch·ªçn ·∫£nh" ·ªü sidebar
    2. **Ch·ªçn tab** ƒë·ªÉ ch·ªânh s·ª≠a 2D ho·∫∑c t·∫°o hi·ªáu ·ª©ng 3D
    3. **ƒêi·ªÅu ch·ªânh tham s·ªë** b·∫±ng c√°c slider
    4. **Xem k·∫øt qu·∫£** v√† download ·∫£nh ƒë√£ ch·ªânh s·ª≠a
    
    ### üìö V·ªÅ Givens Rotation:
    Givens Rotation l√† m·ªôt ph√©p bi·∫øn ƒë·ªïi tr·ª±c giao fundamental trong linear algebra, 
    ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i trong computer graphics, computer vision, v√† scientific computing.
    
    ---
    **üìÅ H√£y upload m·ªôt ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu!**
    """)
    
    # Example images section
    st.markdown("### üñºÔ∏è V√≠ d·ª• k·∫øt qu·∫£:")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("**Original Image**")
        st.markdown("üì∑ ·∫¢nh g·ªëc")
    with col2:
        st.markdown("**2D Givens Rotation**")
        st.markdown("üîÑ Xoay + ch·ªânh s·ª≠a 2D")
    with col3:
        st.markdown("**3D Mesh Effect**")
        st.markdown("üåê Hi·ªáu ·ª©ng 3D v·ªõi depth")
    
    st.markdown("""
    ### üîß Y√™u c·∫ßu h·ªá th·ªëng:
    - **Python 3.7+**
    - **Required:** Streamlit, NumPy, PIL
    - **Optional:** OpenCV (cho enhanced 3D effects), Matplotlib (cho advanced visualization)
    
    ### üìñ Supported Formats:
    PNG, JPG, JPEG, GIF, BMP, TIFF
    """)

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; margin-top: 2rem;'>
    <p>üé® <strong>Givens Rotation Image Editor</strong> - Powered by Mathematical Transformations</p>
    <p>üìä Built with Streamlit ‚Ä¢ üßÆ Linear Algebra ‚Ä¢ üéØ Computer Graphics</p>
</div>
""", unsafe_allow_html=True)
